name: Reusable Tuyauterie Build

on:
  workflow_call:
    inputs:
      tuyauterie-path:
        description: 'Path to .tuyauterie.yaml file'
        required: false
        default: '.tuyauterie.yaml'
        type: string
      github-runner:
        description: 'The GitHub runner to use'
        required: false
        default: 'ubuntu-latest'
        type: string
      github-event:
        description: 'GitHub event that triggered the workflow'
        required: false
        default: 'push'
        type: string
    secrets:
      GITOPS_REPOSITORY_TOKEN:
        description: 'GitHub token for GitOps repository'
        required: false 

# Example of .tuyauterie.yaml file:
#
# version: 1
#
# build:
#   type: golang  # or "python"
#   dockerfile: src/Dockerfile  # Optional, if not provided, defaults to "Dockerfile"
#   upload_artifacts: true # Optional, if not provided, defaults to false
#
# release:
#   rolling: false # Optional, if not provided, defaults to false
#   on-tag: true # Optional, if not provided, defaults to true
#

jobs:
  context:
    runs-on: ${{ inputs.github-runner }}
    outputs:
      build_type: ${{ steps.context.outputs.build_type }}
      build_docker: ${{ steps.context.outputs.build_docker }}
      publish: ${{ steps.context.outputs.publish }}
      upload_artifacts: ${{ steps.context.outputs.upload_artifacts }}
      is_tag: ${{ steps.context.outputs.is_tag }}
      tag_name: ${{ steps.context.outputs.tag_name }}
      artifact_name: ${{ steps.context.outputs.artifact_name }}
      gitops-deployment: ${{ steps.context.outputs.gitops-deployment }}
      gitops-target-repository: ${{ steps.context.outputs.gitops-target-repository }}
      gitops-target-manifest: ${{ steps.context.outputs.gitops-target-manifest }}
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up js-yaml
        run: npm install js-yaml

      - id: context
        name: Read build type from .tuyauterie.yaml
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const yaml = require('./node_modules/js-yaml');
            const path = '${{ inputs.tuyauterie-path }}';

            const fileContent = fs.readFileSync(path, 'utf8');
            const config = yaml.load(fileContent);
            
            console.log(`Parsed configuration: ${JSON.stringify(config)}`);

            const buildType = config?.build?.type ?? 'unknown';

            const uploadArtifacts = config?.build?.upload_artifacts ?? false;
            core.setOutput('upload_artifacts', uploadArtifacts);

            console.log(`Detected build type: ${buildType}`);
            core.setOutput('build_type', buildType);
            
            const Dockerfile = config?.build?.dockerfile ?? 'Dockerfile';
            if (fs.existsSync(Dockerfile)) {
              console.log(`Dockerfile found: ${Dockerfile}, build_docker set to true`);
              core.setOutput('build_docker', "true");
            } else {
              console.log(`Dockerfile not found: ${Dockerfile}, build_docker set to false`);
              core.setOutput('build_docker', "false");
            }
            
            const event = '${{ inputs.github-event }}';

            const releaseOnTag = config?.release?.on_tag ?? true;

            console.log(`GitHub Ref: ${process.env.GITHUB_REF}`);
            
            const ref = process.env.GITHUB_REF ?? '';
            const isTag = ref.startsWith('refs/tags/');
            const tagName = isTag ? ref.replace('refs/tags/', '') : "";
            core.setOutput('is_tag', isTag);
            core.setOutput('tag_name', tagName);

            if (isTag) {
              core.setOutput('artifact_name', `${{ github.event.repository.name }}-${tagName}`);
            } else {
              core.setOutput('artifact_name', "${{ github.event.repository.name }}");
            }

            var publishing = false;
            if (releaseOnTag && isTag) {
              console.log(`Detected event: ${event}`);
              console.log(`Release on tag enabled, 'publish' set to true for Docker build`);
              core.setOutput('publish', "true");
              publishing = true;
            } else {
              console.log(`Detected event: ${event}`);
              console.log(`Condition for release unmet, 'publish' set to false for Docker build`);
              core.setOutput('publish', "false");
              publishing = false;
            }
            
            const deploy = config?.deploy ?? {};

            const enableDeployGitops = config?.deploy?.gitops.enable ?? false;
            if (enableDeployGitops && publishing) {
              console.log(`GitOps deployment enabled`);

              const gitopsTargetRepository = config?.deploy?.gitops?.repository ?? '';
              const gitopsTargetManifest = config?.deploy?.gitops?.manifest ?? '';

              core.setOutput('gitops-deployment', "true");
              core.setOutput('gitops-target-repository', gitopsTargetRepository);
              core.setOutput('gitops-target-manifest', gitopsTargetManifest);
            } else {
              console.log(`Not executing GitOps deployment`);
              core.setOutput('gitops-deployment', "false");
            }

            
            
      - id: Summary
        name: Write GitHub Summary
        uses: actions/github-script@v7
        with:
          script: |
            core.summary
              .addHeading('ðŸ”§ Tuyauterie Build Context')
              .addTable([
                ['Key', 'Value'],
                ['Git Ref', process.env.GITHUB_REF],
                ['Commit SHA', process.env.GITHUB_SHA],
                ['Actor', process.env.GITHUB_ACTOR],
                ['Runner OS', '${{ runner.os }}'],
                ['Job Name', process.env.GITHUB_JOB],
                ['Workflow', process.env.GITHUB_WORKFLOW],
                ['Repository', process.env.GITHUB_REPOSITORY],
                ['Run ID', process.env.GITHUB_RUN_ID],
                ['Build Type', '${{ steps.context.outputs.build_type }}'],
                ['Docker Build', '${{ steps.context.outputs.build_docker }}'],
                ['Publish', '${{ steps.context.outputs.publish }}'],
                ['Artifact Name', '${{ steps.context.outputs.artifact_name }}'],
                ['Upload Artifact', '${{ steps.context.outputs.upload_artifacts }}'],
                ['GitHub Event', '${{ inputs.github-event }}'],
                ['Is Tag', '${{ steps.context.outputs.is_tag }}'],
                ['Tag Name', '${{ steps.context.outputs.tag_name }}'],
                ['GitOps Deployment', '${{ steps.context.outputs.gitops-deployment }}'],
                ['GitOps Target Repository', '${{ steps.context.outputs.gitops-target-repository }}'],
                ['GitOps Target Manifest', '${{ steps.context.outputs.gitops-target-manifest }}']
              ])
              .addLink('View this run', `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`)
              .write();
    
            
  build-golang:
    needs: context
    if: ${{ needs.context.outputs.build_type == 'golang' }}
    uses: ./.github/workflows/build-golang.yml
    with:
      go-version: '1.22' 
      upload-artifact: ${{ needs.context.outputs.publish == 'true' || needs.context.outputs.upload_artifacts == 'true' }}
      artifact-name: ${{ needs.context.outputs.artifact_name }}
      github-runner: ${{ inputs.github-runner }}

  build-python:
    needs: context
    if: ${{ needs.context.outputs.build_type == 'python' }}
    uses: ./.github/workflows/build-python.yml
    with:
      upload-artifact: ${{ needs.context.outputs.publish == 'true' || needs.context.outputs.upload_artifacts == 'true' }}
      artifact-name: ${{ needs.context.outputs.artifact_name }}
      github-runner: ${{ inputs.github-runner }}
      
  build-nix:
    needs: context
    if: ${{ needs.context.outputs.build_type == 'nix' }}
    uses: ./.github/workflows/build-nix-flake.yml
    with:
      github-runner: ${{ inputs.github-runner }}

  build-docker:
    needs: context
    if: ${{ needs.context.outputs.build_docker == 'true' }}
    uses: ./.github/workflows/build-docker.yml
    with:
      upload-artifact: ${{ needs.context.outputs.publish == 'true' || needs.context.outputs.upload_artifacts == 'true' }}
      github-runner: ${{ inputs.github-runner }}
      
  release-log:
    needs: [context, build-golang, build-nix, build-docker]
    if: |
      always() && (needs.context.outputs.publish == 'true') && 
        (needs.context.result == 'success' || needs.context.result == 'skipped') &&
        (needs.build-golang.result == 'success' || needs.build-golang.result == 'skipped') &&
        (needs.build-python.result == 'success' || needs.build-python.result == 'skipped') &&
        (needs.build-docker.result == 'success' || needs.build-docker.result == 'skipped') &&
        (needs.build-nix.result == 'success' || needs.build-nix.result == 'skipped')
    uses: ./.github/workflows/misc-release-log.yml
    with:
      github-runner: ${{ inputs.github-runner }}


  deployment-gitops:
    needs: [release-log, build-docker, context]
    uses: ./.github/workflows/deployment-gitops.yml
    if: always() && (needs.context.outputs.gitops-deployment == 'true') && (needs.build-docker.result == 'success')
    with:
      github-runner: ${{ inputs.github-runner }}
      version: ${{ needs.context.outputs.tag_name }}
      repository: ${{ needs.context.outputs.gitops-target-repository }} 
      deployment-path: ${{ needs.context.outputs.gitops-target-manifest }}
      base-image-pattern: "ghcr.io.*" # This assumes that the image is hosted on GitHub Container Registry
    secrets:
      gitops-token: ${{ secrets.GITOPS_REPOSITORY_TOKEN }}